// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// for postgresql 
 datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// for mysql 
//datasource db {
//  provider = "mysql"
//  url      = env("DATABASE_URL")
//}

// schema.prisma

model User {
  id            Int            @id @default(autoincrement())
  name          String?
  profileImage  String?
  coverImage    String?
  username      String?        @unique
  email         String         @unique
  password      String
  resetToken    String?
  posts         Post[]         @relation("UserPosts")
  reactions     Reaction[]
  comments      Comment[]
  replies       Reply[]
  notifications Notification[]
}

model Post {
  id            Int            @id @default(autoincrement())
  content       String
  timestamp     DateTime       @default(now())
  images        Image[]        @relation("PostImages")
  author        User           @relation("UserPosts", fields: [userId], references: [id])
  userId        Int
  reactions     Reaction[]
  comments      Comment[]
  notifications Notification[]
}

model Image {
  id       Int    @id @default(autoincrement())
  imageUrl String
  postId   Int
  post     Post   @relation("PostImages", fields: [postId], references: [id])
}

model Reaction {
  id           Int      @id @default(autoincrement())
  reactionType String
  postId       Int
  commentId    Int?
  replyId      Int?
  user         User     @relation(fields: [userId], references: [id])
  userId       Int
  post         Post?    @relation(fields: [postId], references: [id])
  comment      Comment? @relation(fields: [commentId], references: [id])
  reply        Reply?   @relation(fields: [replyId], references: [id])
}

model Comment {
  id            Int            @id @default(autoincrement())
  content       String
  timestamp     DateTime       @default(now())
  postId        Int
  userId        Int
  post          Post           @relation(fields: [postId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  reactions     Reaction[]
  replies       Reply[]
  notifications Notification[]
}

model Reply {
  id            Int            @id @default(autoincrement())
  content       String
  timestamp     DateTime       @default(now())
  commentId     Int
  userId        Int
  comment       Comment        @relation(fields: [commentId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  reactions     Reaction[]
  notifications Notification[]
}

model Notification {
  id               Int      @id @default(autoincrement())
  userId           Int
  notificationType String
  postId           Int?
  commentId        Int?
  replyId          Int?
  isRead           Boolean  @default(false)
  user             User     @relation(fields: [userId], references: [id])
  post             Post?    @relation(fields: [postId], references: [id])
  comment          Comment? @relation(fields: [commentId], references: [id])
  reply            Reply?   @relation(fields: [replyId], references: [id])
}
